import telebot
import config
import pyowm
import random
import ntplib
from time import ctime
from time import gmtime
from time import localtime
 
from telebot import types
 
bot = telebot.TeleBot(config.TOKEN)
rating = []

@bot.message_handler(commands=['start'])
def welcome(message):
    start_sticker = open('sticker.webp', 'rb')
    bot.send_sticker(message.chat.id, start_sticker)

    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ")
    item2 = types.KeyboardButton("üå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
    item3 = types.KeyboardButton("üïò–í—Ä–µ–º—è")
    item4 = types.KeyboardButton("üìú–¶–∏—Ç–∞—Ç–∞")
    item5 = types.KeyboardButton("ü§ñ–ß—Ç–æ —è –º–æ–≥—É?")
    item6 = types.KeyboardButton("üìü–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")

 
    markup.add(item1, item2, item3, item4, item5, item6)
 
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç –ø—Ä–∏–∑–≤–∞–Ω–Ω—ã–π –ø–æ–º–æ—á—å —Ç–µ–±–µ!".format(message.from_user, bot.get_me()),
        parse_mode='html', reply_markup=markup)

 
@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.chat.type == 'private':
############        
        if message.text == 'üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ' or message.text.lower() == '—Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
            bot.send_message(message.chat.id, str(random.randint(0,100)))
############
        elif message.text.lower() == '–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å?' or message.text.lower() == '–∫—Ç–æ —Ç–≤–æ–π –±–∞—Ç—è?' or message.text.lower() == '–∫—Ç–æ —Ç–≤–æ–π –æ—Ç–µ—Ü?':
            cool_sticker = open('sticker2.webp', 'rb')
            cool_sticker2 = open('sticker3.webp', 'rb')
            cool_sticker3 = open('coolsticker4.tgs', 'rb')
            cool_stick_list = [cool_sticker, cool_sticker2, cool_sticker3]
            anwser_list = [
            '–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å @SK_300085!'
            ]
            a1 = random.choice(cool_stick_list)
            a2 = random.choice(anwser_list)
            bot.send_sticker(message.chat.id, a1)
            bot.send_message(message.chat.id, a2)

############      
        elif message.text.lower() == '–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?' or message.text.lower() =='–∫–∞–∫ –∑–æ–≤—É—Ç?' or message.text.lower() =='—Å–∫–∞–∂–∏ —Å–≤–æ–µ –∏–º—è' or message.text.lower() =='–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç' or message.text.lower() =='–∫–∞–∫ –∑–æ–≤—É—Ç':
            nameanwsers = [
            '–ë–æ–Ω–¥, –î–∂–µ–π–º—Å –ë–æ–Ω–¥!\n–ê –µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ –º–æ–µ –∏–º—è Kizi',
            '–ú–µ–Ω—è –∑–æ–≤—É—Ç Kizi!',
            '–ú–æ–µ –∏–º—è Kizi!',
            'Mi nombre es kizi!\n(–ø—Å, –µ—Å–ª–∏ –Ω–µ –ø–æ–Ω—è–ª, –º–µ–Ω—è –∑–æ–≤—É—Ç Kizi)'
            ]
            nameanws = random.choice(nameanwsers)
            bot.send_message(message.chat.id, random.choice(nameanwsers))
############
        elif message.text == 'üòä –ö–∞–∫ –¥–µ–ª–∞?' or message.text.lower() == '–∫–∞–∫ –¥–µ–ª–∞?' or message.text.lower() == '–∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?':

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
            item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')
 
            markup.add(item1, item2)
            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∞–º –∫–∞–∫?', reply_markup=markup)
############
        elif message.text == 'üå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞' or message.text.lower() == '–∫–∞–∫–∞—è —Å–µ–π—á–∞—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞?' or message.text.lower() =='–∫–∞–∫–æ–≤–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞' or message.text.lower() =='—Å–∫–∞–∂–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É' or message.text.lower() =='—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞':
            bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ –≤–∞–º –Ω—É–∂–µ–Ω?\n==========================\n–í–≤–µ–¥–∏—Ç–µ "!" –∏ –≥–æ—Ä–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω\n–ù–∞–ø—Ä–∏–º–µ—Ä !–ú–æ—Å–∫–≤–∞')
        elif message.text[0] == '!':
            city = message.text[1:]
            owm = pyowm.OWM('99c544c30e3a7c7d4d2670d7611b36e8')

            try:
                observation = owm.weather_at_place(city)
                w = observation.get_weather()
                temperature = w.get_temperature('celsius')['temp']
                bot.send_message(message.chat.id, 'üå°–í –≥–æ—Ä–æ–¥–µ {0} —Å–µ–π—á–∞—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {1} C'.format(city, str(temperature)))
            except:
                bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥,\n–∏–ª–∏ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–∫–æ–º-—Ç–æ "–ú—É—Ö–æ—Å—Ä–∞–Ω—Å–∫–µ"!')
############       
        elif message.text == 'üïò–í—Ä–µ–º—è' or message.text.lower() == '–≤—Ä–µ–º—è' or message.text.lower() =='—Å–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è?' or message.text.lower() =='–≤—Ä–µ–º—è –Ω–µ –ø–æ–¥—Å–∫–∞–∂–µ—à—å?':
            client = ntplib.NTPClient()
            response = client.request('ru.pool.ntp.org')
            timenow = localtime(response.tx_time)
            time_sticker = open('timesticker.tgs', 'rb')
            bot.send_sticker(message.chat.id, time_sticker)
            bot.send_message(message.chat.id, 'üïò–í—Ä–µ–º—è: {0:02d}:{1:02d}:{2:02d}'.format(timenow.tm_hour, timenow.tm_min, timenow.tm_sec))
############
        elif message.text == 'üìú–¶–∏—Ç–∞—Ç–∞' or message.text.lower() == '—Ü–∏—Ç–∞—Ç–∞' or message.text.lower() =='' or message.text.lower() =='—Ä–∞—Å—Å–∫–∞–∂–∏ —Ü–∏—Ç–∞—Ç—É':
            quote_list = [
            '–ï—Å–ª–∏ —É —Ç–µ–±—è –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±–º–∞–Ω—É—Ç—å —á–µ–ª–æ–≤–µ–∫–∞, —ç—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –æ–Ω –¥—É—Ä–∞–∫, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Ç–µ–±–µ –¥–æ–≤–µ—Ä—è–ª–∏ –±–æ–ª—å—à–µ, —á–µ–º —Ç—ã —ç—Ç–æ–≥–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å.',
            '–ù–µ —Ç–æ—Ç –≤–µ–ª–∏–∫, –∫—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∞–¥–∞–ª, –∞ —Ç–æ—Ç –≤–µ–ª–∏–∫ ‚Äî –∫—Ç–æ –ø–∞–¥–∞–ª –∏ –≤—Å—Ç–∞–≤–∞–ª!',
            '–¢–∞–Ω—Ü—É–π —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ –Ω–∞ —Ç–µ–±—è –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç. –ü–æ–π, –∫–∞–∫ –±—É–¥—Ç–æ —Ç–µ–±—è –Ω–∏–∫—Ç–æ –Ω–µ —Å–ª—ã—à–∏—Ç. –õ—é–±–∏ —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ —Ç–µ–±—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–∞–≤–∞–ª–∏, –∏ –∂–∏–≤–∏ —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ –∑–µ–º–ª—è ‚Äî —ç—Ç–æ —Ä–∞–π.',
            '–ó–∞–≤–µ–¥–∏—Ç–µ —Å–µ–±–µ ¬´–∏–¥–∏–æ—Ç—Å–∫—É—é¬ª –ø—Ä–∏–≤—ã—á–∫—É —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –Ω–µ—É–¥–∞—á–∞–º. –≠—Ç–æ –≥–æ—Ä–∞–∑–¥–æ –≤–µ—Å–µ–ª–µ–π, —á–µ–º —Ä–∞–∑–¥—Ä–∞–∂–∞—Ç—å—Å—è –∏ –Ω—ã—Ç—å –ø–æ –ª—é–±–æ–º—É –ø–æ–≤–æ–¥—É.'
            ]

            quote = random.choice(quote_list)
            bot.send_message(message.chat.id, quote)

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–î–∞", callback_data='yes')
            item2 = types.InlineKeyboardButton("–ù–µ—Ç", callback_data='no')

            markup.add(item1, item2)
            bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É?', reply_markup=markup)

        elif message.text.lower()[0:6] == '–æ—Ü–µ–Ω–∫–∞':
            bot.send_message(message.chat.id, '–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')
            rating.append(message.text.lower()[-1])

        
        elif  message.text.lower() == '/liststatus':
            bot.send_message(message.chat.id, rating)

############
        elif message.text.lower() == '–∏–≥—Ä—ã' or message.text.lower() == '–∏–≥—Ä–∞':
            bot.send_message(message.chat.id, 'Coming soon!')

        elif message.text.lower() == '–∫–≤–µ—Å—Ç':
            bot.send_message(message.chat.id, 'Coming soon!')
            #am = open('AzbukaMorza.jpg', 'rb')
            #bot.send_photo(message.chat.id, am)
############
        elif message.text == 'üìü–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä' or message.text.lower() == '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä':
            bot.send_message(message.chat.id, 'x + y  –°–ª–æ–∂–µ–Ω–∏–µ\nx - y  –í—ã—á–∏—Ç–∞–Ω–∏–µ\nx * y  –£–º–Ω–æ–∂–µ–Ω–∏–µ\nx / y  –î–µ–ª–µ–Ω–∏–µ\n x // y  –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ\nx % y  –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è\n x ** y  –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å')
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:')
        elif '%' in message.text or '+' in message.text or '-' in message.text or '*' in message.text or '/' in message.text:
            try:
                x = message.text
                bot.send_message(message.chat.id, eval(x))
            except:
                bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞!')
############
        elif message.text == 'ü§ñ–ß—Ç–æ —è –º–æ–≥—É?' or message.text.lower() == '—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å?' or message.text.lower() == '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?':
            ican = open('dance.tgs','rb')
            bot.send_sticker(message.chat.id, ican)

            bot.send_message(message.chat.id, '–ó–∞–ø—Ä–æ—Å—ã:\n     1)–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞\n     2)–í—Ä–µ–º—è\n     3)–ò–≥—Ä–∞\n     4)–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ\n–í–æ–ø—Ä–æ—Å—ã:\n     1)–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?\n     2)–ö—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å?\n     3)–ö–∞–∫ –¥–µ–ª–∞?')   
############
        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢')
 
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ üòä')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç üò¢')
            elif call.data == 'yes':
                bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ "–û—Ü–µ–Ω–∫–∞:" –∏ –æ—Ü–µ–Ω–∏—Ç–µ –æ—Ç 1 –¥–æ 5\n–ù–∞–ø—Ä–∏–º–µ—Ä –û—Ü–µ–Ω–∫–∞: 5')
            elif call.data == 'no':
                bot.send_message(call.message.chat.id, '–ü—Ä–∏–Ω—è—Ç–æ!')
 
            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="==================",
                reply_markup=None)
 
            # show alert
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                text="–í—ã —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä!")
 
    except Exception as e:
        print(repr(e))
 
# RUN
bot.polling(none_stop=True)